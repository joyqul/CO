$date
	Sun Apr 27 15:01:17 2014
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! CLK $end
$var reg 1 " RST $end
$var integer 32 # count [31:0] $end
$var integer 32 $ end_count [31:0] $end
$var integer 32 % handle [31:0] $end
$scope module cpu $end
$var wire 32 & ALUResult [31:0] $end
$var wire 1 ' ALUZero $end
$var wire 1 ( Branch $end
$var wire 5 ) RDaddr [4:0] $end
$var wire 1 * RegWrite $end
$var wire 1 + clk_i $end
$var wire 32 , four [31:0] $end
$var wire 32 - instr [31:0] $end
$var wire 32 . pc_out [31:0] $end
$var wire 1 / pc_select $end
$var wire 1 0 rst_i $end
$var wire 32 1 sign_extend [31:0] $end
$var wire 32 2 sum_pc_four [31:0] $end
$var reg 6 3 funct [5:0] $end
$var reg 6 4 instr_op [5:0] $end
$var reg 5 5 rd [4:0] $end
$var reg 5 6 rs [4:0] $end
$var reg 5 7 rt [4:0] $end
$scope module PC $end
$var wire 1 + clk_i $end
$var wire 32 8 pc_in_i [31:0] $end
$var wire 1 0 rst_i $end
$var reg 32 9 pc_out_o [31:0] $end
$upscope $end
$scope module Adder1 $end
$var wire 32 : src1_i [31:0] $end
$var wire 32 ; src2_i [31:0] $end
$var wire 32 < sum_o [31:0] $end
$upscope $end
$scope module IM $end
$var wire 32 = pc_addr_i [31:0] $end
$var integer 32 > i [31:0] $end
$var reg 32 ? instr_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 @ data0_i [4:0] $end
$var wire 5 A data1_i [4:0] $end
$var wire 1 B select_i $end
$var reg 5 C data_o [4:0] $end
$upscope $end
$scope module RF $end
$var wire 5 D RDaddr_i [4:0] $end
$var wire 32 E RDdata_i [31:0] $end
$var wire 5 F RSaddr_i [4:0] $end
$var wire 32 G RSdata_o [31:0] $end
$var wire 5 H RTaddr_i [4:0] $end
$var wire 32 I RTdata_o [31:0] $end
$var wire 1 * RegWrite_i $end
$var wire 1 + clk_i $end
$var wire 1 0 rst_i $end
$upscope $end
$scope module Decoder $end
$var wire 6 J instr_op_i [5:0] $end
$var reg 1 K ALUSrc_o $end
$var reg 3 L ALU_op_o [2:0] $end
$var reg 1 M Branch_o $end
$var reg 1 N RegDst_o $end
$var reg 1 O RegWrite_o $end
$upscope $end
$scope module AC $end
$var wire 3 P ALUOp_i [2:0] $end
$var wire 6 Q funct_i [5:0] $end
$var reg 4 R ALUCtrl_o [3:0] $end
$upscope $end
$scope module SE $end
$var wire 16 S data_i [15:0] $end
$var reg 32 T data_o [31:0] $end
$upscope $end
$scope module Mux_ALUSrc $end
$var wire 32 U data0_i [31:0] $end
$var wire 32 V data1_i [31:0] $end
$var wire 1 W select_i $end
$var reg 32 X data_o [31:0] $end
$upscope $end
$scope module ALU $end
$var wire 4 Y ctrl_i [3:0] $end
$var wire 32 Z src1_i [31:0] $end
$var wire 32 [ src2_i [31:0] $end
$var wire 1 ' zero_o $end
$var reg 32 \ result_o [31:0] $end
$upscope $end
$scope module Adder2 $end
$var wire 32 ] src1_i [31:0] $end
$var wire 32 ^ src2_i [31:0] $end
$var wire 32 _ sum_o [31:0] $end
$upscope $end
$scope module Shifter $end
$var wire 32 ` data_i [31:0] $end
$var wire 32 a data_o [31:0] $end
$upscope $end
$scope module Mux_PC_Source $end
$var wire 32 b data0_i [31:0] $end
$var wire 32 c data1_i [31:0] $end
$var wire 1 / select_i $end
$var reg 32 d data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx d
bx c
bx b
b0xxxxxxxxxxxxxxxx00 a
b0xxxxxxxxxxxxxxxx `
bx _
b0xxxxxxxxxxxxxxxx00 ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
xW
b0xxxxxxxxxxxxxxxx V
bx U
b0xxxxxxxxxxxxxxxx T
bx S
bx R
bx Q
bx P
xO
xN
xM
bx L
xK
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
xB
bx A
bx @
bx ?
b100000 >
bx =
bx <
b100 ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
b0xxxxxxxxxxxxxxxx 1
00
x/
bx .
bx -
b100 ,
0+
x*
bx )
x(
x'
bx &
b10 %
b11001 $
b0 #
0"
0!
$end
#5
b101100 _
b101100 c
b101000 ^
b101000 a
b1010 T
b1010 1
b1010 V
b1010 `
b1010 S
b1000 J
b100 d
b100 2
b100 8
b100 ]
b100000000000010000000000001010 ?
b100000000000010000000000001010 -
b0 9
b100 <
b100 b
b0 .
b0 :
b0 =
b1 #
1!
1+
#10
0!
0+
1"
10
#15
b10000 ^
b10000 a
b100 T
b100 1
b100 V
b100 `
b100 S
b1000 d
b11000 _
b11000 c
b1000 2
b1000 8
b1000 ]
b100000000000100000000000000100 ?
b100000000000100000000000000100 -
b100 9
b1000 <
b1000 b
b100 .
b100 :
b100 =
b1 C
b1 )
b1 D
b0 X
b10 #
b1010 3
b1010 Q
b0 5
b0 A
b1 7
b1 @
b1 H
b0 I
b0 U
b0 6
b0 F
b0 G
b0 Z
b1000 4
1!
1+
#20
0!
0+
#25
0/
0M
0(
1N
1B
1O
1*
0K
b10 L
b110000010101000 ^
b110000010101000 a
b1100000101010 T
b1100000101010 1
b1100000101010 V
b1100000101010 `
b1100000101010 S
b0 J
b1100 d
b110000010110100 _
b110000010110100 c
b1100 2
b1100 8
b1100 ]
b1000100001100000101010 ?
b1000100001100000101010 -
b1000 9
b1100 <
b1100 b
b1000 .
b1000 :
b1000 =
b0 C
b0 )
b0 D
b100 3
b100 Q
b10 7
b10 @
b10 H
b11 #
1!
1+
#30
0!
0+
#35
b100 ^
b100 a
b1 T
b1 1
b1 V
b1 `
b1 S
b100 J
b10000 d
b10100 _
b10100 c
b10000 2
b10000 8
b10000 ]
b10000011000000000000000000001 ?
b10000011000000000000000000001 -
b1100 9
b10000 <
b10000 b
b1100 .
b1100 :
b1100 =
b11 C
b11 )
b11 D
b100 #
b101010 3
b101010 Q
b11 5
b11 A
b1 6
b1 F
b0 4
1!
1+
#40
0!
0+
#45
b1000000010000000 ^
b1000000010000000 a
b10000000100000 T
b10000000100000 1
b10000000100000 V
b10000000100000 `
b10000000100000 S
b0 J
b10100 d
b1000000010010100 _
b1000000010010100 c
b10100 2
b10100 8
b10100 ]
b1000100010000000100000 ?
b1000100010000000100000 -
bx G
bx Z
b10000 9
b10100 <
b10100 b
b10000 .
b10000 :
b10000 =
b0 C
b0 )
b0 D
bx X
b1 3
b1 Q
b0 5
b0 A
b0 7
b0 @
b0 H
bx I
bx U
b11 6
b11 F
b100 4
b101 #
1!
1+
#50
0!
0+
#55
b1010000010001000 ^
b1010000010001000 a
b10100000100010 T
b10100000100010 1
b10100000100010 V
b10100000100010 `
b10100000100010 S
b11000 d
b1010000010100000 _
b1010000010100000 c
b11000 2
b11000 8
b11000 ]
b1000100010100000100010 ?
b1000100010100000100010 -
b10100 9
b11000 <
b11000 b
b10100 .
b10100 :
b10100 =
b100 C
b100 )
b100 D
b0 X
b110 #
b100000 3
b100000 Q
b100 5
b100 A
b10 7
b10 @
b10 H
b0 I
b0 U
b1 6
b1 F
b0 G
b0 Z
b0 4
1!
1+
#60
0!
0+
#65
b0 ^
b0 a
b0 T
b0 1
b0 V
b0 `
b0 S
b11100 d
b11100 _
b11100 c
b11100 2
b11100 8
b11100 ]
b0 ?
b0 -
b11000 9
b11100 <
b11100 b
b11000 .
b11000 :
b11000 =
b101 C
b101 )
b101 D
b100010 3
b100010 Q
b101 5
b101 A
b111 #
1!
1+
#70
0!
0+
#75
b100000 d
b100000 _
b100000 c
b100000 2
b100000 8
b100000 ]
b11100 9
b100000 <
b100000 b
b11100 .
b11100 :
b11100 =
b0 C
b0 )
b0 D
bx X
b1000 #
b0 3
b0 Q
b0 5
b0 A
b0 7
b0 @
b0 H
bx I
bx U
b0 6
b0 F
bx G
bx Z
1!
1+
#80
0!
0+
#85
b100100 d
b100100 _
b100100 c
b100100 2
b100100 8
b100100 ]
b100000 9
b100100 <
b100100 b
b100000 .
b100000 :
b100000 =
b1001 #
1!
1+
#90
0!
0+
#95
b101000 d
b101000 _
b101000 c
b101000 2
b101000 8
b101000 ]
b100100 9
b101000 <
b101000 b
b100100 .
b100100 :
b100100 =
b1010 #
1!
1+
#100
0!
0+
#105
b101100 d
b101100 _
b101100 c
b101100 2
b101100 8
b101100 ]
b101000 9
b101100 <
b101100 b
b101000 .
b101000 :
b101000 =
b1011 #
1!
1+
#110
0!
0+
#115
b110000 d
b110000 _
b110000 c
b110000 2
b110000 8
b110000 ]
b101100 9
b110000 <
b110000 b
b101100 .
b101100 :
b101100 =
b1100 #
1!
1+
#120
0!
0+
#125
b110100 d
b110100 _
b110100 c
b110100 2
b110100 8
b110100 ]
b110000 9
b110100 <
b110100 b
b110000 .
b110000 :
b110000 =
b1101 #
1!
1+
#130
0!
0+
#135
b111000 d
b111000 _
b111000 c
b111000 2
b111000 8
b111000 ]
b110100 9
b111000 <
b111000 b
b110100 .
b110100 :
b110100 =
b1110 #
1!
1+
#140
0!
0+
#145
b111100 d
b111100 _
b111100 c
b111100 2
b111100 8
b111100 ]
b111000 9
b111100 <
b111100 b
b111000 .
b111000 :
b111000 =
b1111 #
1!
1+
#150
0!
0+
#155
b1000000 d
b1000000 _
b1000000 c
b1000000 2
b1000000 8
b1000000 ]
b111100 9
b1000000 <
b1000000 b
b111100 .
b111100 :
b111100 =
b10000 #
1!
1+
#160
0!
0+
#165
b1000100 d
b1000100 _
b1000100 c
b1000100 2
b1000100 8
b1000100 ]
b1000000 9
b1000100 <
b1000100 b
b1000000 .
b1000000 :
b1000000 =
b10001 #
1!
1+
#170
0!
0+
#175
b1001000 d
b1001000 _
b1001000 c
b1001000 2
b1001000 8
b1001000 ]
b1000100 9
b1001000 <
b1001000 b
b1000100 .
b1000100 :
b1000100 =
b10010 #
1!
1+
#180
0!
0+
#185
b1001100 d
b1001100 _
b1001100 c
b1001100 2
b1001100 8
b1001100 ]
b1001000 9
b1001100 <
b1001100 b
b1001000 .
b1001000 :
b1001000 =
b10011 #
1!
1+
#190
0!
0+
#195
b1010000 d
b1010000 _
b1010000 c
b1010000 2
b1010000 8
b1010000 ]
b1001100 9
b1010000 <
b1010000 b
b1001100 .
b1001100 :
b1001100 =
b10100 #
1!
1+
#200
0!
0+
#205
b1010100 d
b1010100 _
b1010100 c
b1010100 2
b1010100 8
b1010100 ]
b1010000 9
b1010100 <
b1010100 b
b1010000 .
b1010000 :
b1010000 =
b10101 #
1!
1+
#210
0!
0+
#215
b1011000 d
b1011000 _
b1011000 c
b1011000 2
b1011000 8
b1011000 ]
b1010100 9
b1011000 <
b1011000 b
b1010100 .
b1010100 :
b1010100 =
b10110 #
1!
1+
#220
0!
0+
#225
b1011100 d
b1011100 _
b1011100 c
b1011100 2
b1011100 8
b1011100 ]
b1011000 9
b1011100 <
b1011100 b
b1011000 .
b1011000 :
b1011000 =
b10111 #
1!
1+
#230
0!
0+
#235
b1100000 d
b1100000 _
b1100000 c
b1100000 2
b1100000 8
b1100000 ]
b1011100 9
b1100000 <
b1100000 b
b1011100 .
b1011100 :
b1011100 =
b11000 #
1!
1+
#240
0!
0+
#245
b1100100 d
b1100100 _
b1100100 c
b1100100 2
b1100100 8
b1100100 ]
b1100000 9
b1100100 <
b1100100 b
b1100000 .
b1100000 :
b1100000 =
b11001 #
1!
1+
#250
0!
0+
#255
b1101000 d
b1101000 _
b1101000 c
b1101000 2
b1101000 8
b1101000 ]
b1100100 9
b1101000 <
b1101000 b
b1100100 .
b1100100 :
b1100100 =
b11010 #
1!
1+
#260
